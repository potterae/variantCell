getwd()
devtools::document()
library(roxygen2)
devtools::document()
library(devtools)
devtools::document()
getwd()
roxygen2::roxygenise()
setwd("R/DE-SNP/")
roxygen2::roxygenise()
setwd('D:/variantCell/')
roxygen2::roxygenise()
library(roxygen2)
library(devtools)
devtools::document()
library(devtools)
library(roxygen2)
devtools::document()
library(R6)
library(data.table)
library(Matrix)
library(ggplot2)
library(cowplot)
library(GenomicRanges)
library(IRanges)
library(AnnotationHub)
library(matrixStats)
library(ensembldb)
library(circlize)
library(ComplexHeatmap)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
library(R6)
library(data.table)
library(Matrix)
library(ggplot2)
library(cowplot)
library(GenomicRanges)
library(IRanges)
library(AnnotationHub)
library(matrixStats)
library(ensembldb)
library(circlize)
library(ComplexHeatmap)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
getwd()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
install.packages("D:/variantCell_0.1.0.tar.gz")
install.packages("D:/variantCell_0.1.0.tar.gz")
library(R6)
library(data.table)
library(Matrix)
library(ggplot2)
library(cowplot)
library(GenomicRanges)
library(IRanges)
library(AnnotationHub)
library(matrixStats)
library(ensembldb)
library(circlize)
library(ComplexHeatmap)
library(variantCell)
setwd("D:/scripts/single cell/variantCell/")
build_variantCell_project <- function(
metadata_dir = "sc_metadata/",
vireo_base_dir = "Vireo/",
cellsnp_base_dir = "cellSNP/",
sample_config = NULL,
non_transplant_mode = FALSE
) {
# Import metadata from directory
import_metadata_directory(metadata_dir)
# Create a new DONOR project
project <- variantCell$new()
# If no sample config is provided, use default mapping
if (is.null(sample_config)) {
# Default mapping with sample-specific configurations
sample_config <- list(
TBX1  = list(prefix = "Patient1_SevereACR_TBX1_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX3  = list(prefix = "Patient1_ACR_TBX3_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX4  = list(prefix = "Patient2_ImprovingACR_TBX4_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX5  = list(prefix = "Patient2_ResolvedACR_TBX5_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX6  = list(prefix = "Patient3_NoACR_TBX6_", donor_types = c(donor0 = "Recipient", donor1 = "Donor")),
TBX7  = list(prefix = "Patient3_NoACR_TBX7_", donor_types = c(donor0 = "Recipient", donor1 = "Donor")),
TBX8  = list(prefix = "Patient3_NoACR_TBX8_", donor_types = c(donor0 = "Recipient", donor1 = "Donor")),
TBX9  = list(prefix = "Patient4_NoACR_TBX9_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX10 = list(prefix = "Patient4_NoACR_TBX10_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX11 = list(prefix = "Patient3_NoACR_TBX11_", donor_types = c(donor0 = "Recipient", donor1 = "Donor")),
TBX12 = list(prefix = "Patient5_NoACR_TBX12_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX13 = list(prefix = "Patient6_NoACR_TBX13_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX18 = list(prefix = "Patient4_NoACR_TBX18_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX42 = list(prefix = "Patient9_MildACR_TBX42_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX45 = list(prefix = "Patient9_ResolvedACR_TBX45_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX49 = list(prefix = "Patient9_NoACR_TBX49_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
TBX51 = list(prefix = "Patient9_NoACR_TBX51_", donor_types = c(donor0 = "Donor", donor1 = "Recipient")),
FL8   = list(prefix = "Patient10_MildACR_FL8_", donor_types = c(donor0 = "Recipient", donor1 = "Donor"))
)
}
# Process each sample
for (sample_id in names(sample_config)) {
# Get config for this sample
config <- sample_config[[sample_id]]
# Set defaults and handle special cases
vireo_subdir <- ifelse(is.null(config$vireo_subdir), sample_id, config$vireo_subdir)
cellsnp_subdir <- ifelse(is.null(config$cellsnp_subdir), sample_id, config$cellsnp_subdir)
# Get metadata dataframe
df_name <- paste0(sample_id, "_df")
# Check if dataframe exists in environment
if (!exists(df_name)) {
warning(sprintf("Metadata dataframe '%s' not found. Skipping sample '%s'.", df_name, sample_id))
next
}
cat(sprintf("\n===== Processing Sample: %s =====\n", sample_id))
# Get the dataframe
metadata_df <- get(df_name)
sample_non_transplant_mode <- if(!is.null(config$non_transplant_mode)) config$non_transplant_mode else non_transplant_mode
# Add sample to the project
tryCatch({
project$addSampleData(
sample_id = sample_id,
vireo_path = file.path(vireo_base_dir, vireo_subdir, "donor_ids.tsv"),
cellsnp_path = file.path(cellsnp_base_dir, cellsnp_subdir),
cell_data = metadata_df,
data_type = 'dataframe',
prefix_text = config$prefix,
donor_type = if(sample_non_transplant_mode) NULL else config$donor_types,
non_transplant_mode = sample_non_transplant_mode,
normalize = TRUE
)
cat(sprintf("Successfully added sample: %s\n", sample_id))
}, error = function(e) {
warning(sprintf("Error adding sample '%s': %s", sample_id, e$message))
})
}
# Build the SNP database with all added samples
cat("\n===== Building SNP Database =====\n")
project$buildSNPDatabase()
cat("\variantCell project successfully built with", length(project$samples), "samples.\n")
# Return the project for further use
return(project)
}
import_metadata_directory <- function(directory_path) {
# Check if directory exists
if (!dir.exists(directory_path)) {
stop(sprintf("Directory '%s' does not exist", directory_path))
}
# Get all CSV files in the directory
csv_files <- list.files(directory_path, pattern = "*.csv", full.names = TRUE)
if (length(csv_files) == 0) {
warning("No CSV files found in the specified directory")
return(invisible(NULL))
}
# Initialize a vector to track imported dataframe names
imported_dfs <- character()
# Process each CSV file
for (file_path in csv_files) {
# Get file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
df_name <- paste0(file_name, "_df")
# Read the CSV file
meta_df <- read.csv(file_path, stringsAsFactors = FALSE)
# Make cell_id column the row names (important for matching with Vireo data)
if("cell_id" %in% colnames(meta_df)) {
rownames(meta_df) <- meta_df$cell_id
meta_df$cell_id <- NULL  # Remove the column as it's now in rownames
} else {
warning(sprintf("No 'cell_id' column found in %s. Row matching may be problematic.", file_name))
}
# Print summary
cat(sprintf("Imported metadata from %s\n", file_path))
cat(sprintf("Number of cells: %d\n", nrow(meta_df)))
cat(sprintf("Number of columns: %d\n", ncol(meta_df)))
# Assign the dataframe directly to the parent environment
assign(df_name, meta_df, envir = parent.frame())
# Add the dataframe name to our tracking list
imported_dfs <- c(imported_dfs, df_name)
}
cat(sprintf("\nTotal files imported: %d\n", length(imported_dfs)))
cat("Imported dataframes:", paste(imported_dfs, collapse = ", "), "\n")
# Return the names of imported dataframes invisibly
return(invisible(imported_dfs))
}
project <- build_variantCell_project()
View(project$snp_database$cell_metadata)
collapsed <- project$aggregateByGroup(
group_by = "snpGrade", #snpGrade indicates whether a patient developed ACR or not (ACR, No_ACR)
use_normalized = TRUE, # use normalized counts?
donor_type = 'Donor' #donor_type variable allows aggregating by Donor or Recipient to check DE SNPs within groups
)
de_results <- project$findSNPsByGroup(
ident.1 = "ACR",     # ident.1 and ident.2 are from the 'group_by' variable when aggregating
ident.2 = 'No_ACR',  #
aggregated_data = collapsed,
min_alt_frac = 0.05,
max_alt_frac_other =0.01
)
View(de_results$results)
variantCell_project$setProjectIdentity('cell_type')
project$setProjectIdentity('cell_type')
DE_norm <- project$findDESNPs(ident.1 = "Trm",use_normalized = TRUE, debug = TRUE,n_cores = 15)
View(DE_norm$results)
DE_norm <- project$findDESNPs(ident.1 = "Trm",use_normalized = TRUE, debug = TRUE,n_cores = 8)
DE_norm <- project$findDESNPs(ident.1 = "Trm",use_normalized = TRUE, debug = TRUE,n_cores = 5)
DE_norm <- project$findDESNPs(ident.1 = "Trm",use_normalized = TRUE, debug = TRUE,n_cores = 25)
setwd("D:/scripts/single cell/variantCell/")
saveRDS(project, 'vCell_project_051225.rds')
