[{"path":"https://potterae.github.io/variantCell/articles/build_snp_database.html","id":"creating-a-new-variantcell-project","dir":"Articles","previous_headings":"","what":"Creating a new variantCell project","title":"Building the SNP database","text":"haven’t already done , can create new project using command: initialize project.","code":"#Create new variantCell object project <- variantCell$new()"},{"path":"https://potterae.github.io/variantCell/articles/build_snp_database.html","id":"building-the-snp-database","dir":"Articles","previous_headings":"","what":"Building the SNP database","title":"Building the SNP database","text":"build SNP database, first need add sample individually, optionally specifying donor recipient (please see tutorial identifying donor/recipient). example, setting donor recipient (transplant mode): initial analysis, recommended perform filtering (min_cells=0, min_alt_frac=0) help facilitate downstream DE analysis plotting. normalize set TRUE, size factor normalization performed, using total DP (SNP counts) cell. Downstream analysis can optionally use normalized SNP counts. samples added, can build unified SNP database executing function: buildSNPDatabase() ie, vCell_project$buildSNPDatabase()","code":"# add one sample to SNP database   addSampleData = function(     sample_id,     vireo_path          = NULL,     cellsnp_path,     cell_data,     data_type           = \"seurat\",     prefix_text,     donor_type          = NULL,     non_transplant_mode = FALSE,     min_cells           = 0,     min_alt_frac        = 0,     normalize           = TRUE,     scale.factor        = 10000,     sample_metadata     = NULL   ) # usage example      project$addSampleData(       sample_id    = \"Sample1\",       vireo_path   = \"/path/to/donor_ids.tsv\",       cellsnp_path = \"/path/to/cellSNP/dir/\",       cell_data    = seuratObj,       data_type    = 'seurat',       prefix_text  = \"Patient1_Sample1_\",       normalize    = TRUE,       donor_type   = c(donor0 = \"Donor\", donor1 = \"Recipient\")     )"},{"path":"https://potterae.github.io/variantCell/articles/cell_level_DE.html","id":"cell-level-de-snp-analysis","dir":"Articles","previous_headings":"","what":"Cell-level DE SNP Analysis","title":"Cell-level DE SNP Analsyis","text":"Cell-level differential SNP analysis focuses identifying differential SNP expression cell clusters.","code":""},{"path":"https://potterae.github.io/variantCell/articles/cell_level_DE.html","id":"find-de-snps-between-cell-clusters","dir":"Articles","previous_headings":"Cell-level DE SNP Analysis","what":"Find DE SNPs between cell clusters","title":"Cell-level DE SNP Analsyis","text":"perform cell-level DE SNP analysis, use findDESNPs function: Usage example: ident.1 mandatory, ident.2 can optionally used compare second identity. Use n_cores parameter set many processing cores used. dataframe returned DE SNP results.","code":"#Set up project  # Creat variantCell object (if you haven't already done so) \\dontrun{   # Initialize a variantCell project   project <- variantCell$new()      # In practice, you would add samples and build the database first   # project$addSampleData(...)   # project$buildSNPDatabase()   # project$setProjectIdentity(\"cell_type\") #Set metadata column as identity project$setProjectIdentity(\"cell_type\") #find DE SNPs between cell clusters findDESNPs = function(ident.1,                        ident.2 = NULL,                       donor_type = NULL,                       use_normalized = TRUE,                           min_expr_cells = 3,                               min_alt_frac = 0.2,                               logfc.threshold = 0.1,                            calc_p = TRUE,                                    p.adjust.method = \"BH\",                       return_all = TRUE,                       pseudocount = 1,                                  min.p = 1e-300,                       debug = FALSE,                       n_cores = NULL) } #find DE SNPs between Trm and all others DE_results <- project$findDESNPs(   ident.1        = \"Trm\",   use_normalized = TRUE,   n_cores        = 15 )"},{"path":"https://potterae.github.io/variantCell/articles/cell_level_DE.html","id":"visualizing-de-snp-expression-in-cell-clusters","dir":"Articles","previous_headings":"","what":"Visualizing DE SNP Expression in Cell Clusters","title":"Cell-level DE SNP Analsyis","text":"heatmap can generated illustrating DE SNP expression (requires ComplexHeatMap circlize):","code":"#plot SNPs in heatmap     plotSNPHeatmap = function(                                   genes = NULL,                                   snp_indices = NULL,                                   group.by,                                   split.by = NULL,                                   min_alt_frac = 0.2,                                   scale_data = TRUE,                                   max_scale = 2,                                   cluster_rows = TRUE,                                   cluster_cols = TRUE,                                   show_rownames = TRUE,                                   show_colnames = TRUE,                                   fontsize_row = 8,                                   fontsize_col = 8,                                   exclude_empty = TRUE,                                     normalize_by_cells = TRUE,                                     data_out = FALSE                      ) #plot JAK1 SNPs in heatmap (entire dataset) - using 'simple' idents project$plotSNPHeatmap(   genes        = c(\"JAK1\"),   group.by     = \"Idents.Simple\",   min_alt_frac = 0 )"},{"path":"https://potterae.github.io/variantCell/articles/donor_recipient.html","id":"creating-a-new-variantcell-project","dir":"Articles","previous_headings":"","what":"Creating a new variantCell project","title":"Determining Donor and Recipient Cells","text":"haven’t already done , can create new project using command: initialize project.","code":"#Create new variantCell object project <- variantCell$new()"},{"path":"https://potterae.github.io/variantCell/articles/donor_recipient.html","id":"determining-donor-recipient-cells-in-single-cell-data","dir":"Articles","previous_headings":"","what":"Determining Donor / Recipient Cells in Single Cell Data","title":"Determining Donor and Recipient Cells","text":"need identify cells donor recipient, can use process_vireo_seurat helper function (). Usage example: provide output similar , indicating matching cells metadata, cell type distribution donors identified Vireo: Initial cell identities Seurat object: Sample1 1152 Seurat object cells: 1152 Total Vireo cells: 1661 First Seurat rownames: Patient1_AAACCCAAGTCTAGAA-1 Patient1_AAACGCTGTGGACAGT-1 Patient1_AAAGGATCAGTTGTTG-1 Patient1_AAAGGATTCCTCGCAT-1 Patient1_AAAGTCCAGCACTCCG-1 Patient1_AAAGTCCGTTGCATTG-1 First metadata rownames: Patient1_AAACCCAAGTCTAGAA-1 Patient1_AAACGCTGTGGACAGT-1 Patient1_AAAGGATCAGTTGTTG-1 Patient1_AAAGGATTCCTCGCAT-1 Patient1_AAAGGGCTCAAAGGTA-1 Patient1_AAAGTCCAGCACTCCG-1 Number matching cells: 1152 Cell type distribution donor1: Cell type distribution donor0: case, donor cells can identified (likely) donor0 - predominantly structural lung cells, donor1, containing mostly immune cells, recipient. used input addSampleData function - specify donor recipient/donor. process need repeated sample determine donor/recipient, based cell type distributions.","code":"#process vireo using Seurat metadata process_vireo_seurat = function(   seurat_obj,   vireo_path,   prefix_text ) sample_donor_recipient <- vCell_project$process_vireo_seurat(     sample,     vireo_path  = \"donor_ids.tsv\",     prefix_text = \"prefix_text_to_add_\" ) Classical Monocyte        Differentiating T            Gamma Delta T        IGSF21+ Dendritic                    10                       34                       81                        9       Innate Lymphoid    Intermediate Monocyte               Macrophage                     MAIT                     4                        3                       29                        5                  Mast                 Memory B Myeloid Dendritic Type 1 Myeloid Dendritic Type 2                    13                       46                       10                       23               Naive B             Naive CD4+ T             Naive CD8+ T               Neutrophil                     1                       31                        2                        1                    NK    Nonclassical Monocyte OLR1+ Classical Monocyte                   Plasma                    14                       23                        2                       62 Adventitial Fibroblast       Airway Smooth Muscle Alveolar Epithelial Type 1 Alveolar Epithelial Type 2                       5                          1                          3                          1     Alveolar Fibroblast                     Artery                      Basal                  Capillary                      13                         10                         16                         38      Capillary Aerocyte                   Ciliated      Differentiating Basal                     Goblet                       3                          3                          1                          1               Lymphatic           Microvasculature                     Mucous              Myofibroblast                       1                         11                          1                          3                Pericyte                     Plasma        Proliferating Basal             Proximal Basal                       6                          3                          2                          3  Vascular Smooth Muscle                       Vein                       3                         11"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"group-level-snp-analysis","dir":"Articles","previous_headings":"","what":"Group-level SNP Analysis","title":"Group-level DE SNP Analsyis","text":"Group level differential expression analysis requires SNP database built (please see previous tutorials). guide walk process analyzing SNPs group level using variantCell package.","code":""},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"exploring-snp-metadata","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Exploring SNP Metadata","title":"Group-level DE SNP Analsyis","text":"view SNP metadata within project, can use following command:","code":"\\dontrun{   # Initialize a variantCell project   project <- variantCell$new()      # In practice, you would add samples and build the database first   # project$addSampleData(...)   # project$buildSNPDatabase()   # project$setProjectIdentity(\"cell_type\")  } # View SNP metadata View(project$snp_database$cell_metadata)"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"creating-custom-metadata-variables","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Creating Custom Metadata Variables","title":"Group-level DE SNP Analsyis","text":"can create new metadata variables help grouping visualization:","code":"# Create a combined patient and donor type variable project$snp_database$cell_metadata$patient_donor <- paste0(   project$snp_database$cell_metadata$patient,    '_',    project$snp_database$cell_metadata$donor_type )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"aggregating-snp-counts-by-group","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Aggregating SNP Counts by Group","title":"Group-level DE SNP Analsyis","text":"Prior analyzing SNP expression differences groups, need aggregate individual cell SNP counts group-level summaries.","code":""},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"aggregatebygroup-function","dir":"Articles","previous_headings":"Group-level SNP Analysis > Aggregating SNP Counts by Group","what":"aggregateByGroup Function","title":"Group-level DE SNP Analsyis","text":"","code":"# Function signature and parameters project$aggregateByGroup(   group_by,                # Column name in metadata to use for grouping cells   donor_type = NULL,       # Specific donor type to analyze (e.g., \"Donor\" or \"Recipient\")   min_cells_per_group = 3, # Minimum cells required per group   use_normalized = TRUE    # Whether to use normalized counts )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"example-aggregating-by-disease-status-for-donor-cells","dir":"Articles","previous_headings":"Group-level SNP Analysis > Aggregating SNP Counts by Group","what":"Example: Aggregating by Disease Status for Donor Cells","title":"Group-level DE SNP Analsyis","text":"executed, see output similar :","code":"# Aggregate SNP counts by ACR status, using only donor cells collapsed <- project$aggregateByGroup(   group_by = \"snpGrade\",     # Group by ACR status   use_normalized = TRUE,     # Use normalized counts   donor_type = 'Donor'       # Restrict to donor cells only ) Filtering for donor type: Donor Total cells before filter: 56676 Cells passing filter: 22096 NA values in donor_type: 1003  Collapsed data by snpGrade:  - Total cells: 22096  - Total groups: 2  - Included groups: 2  - Filtered groups: 0  - Using normalized counts: TRUE  Group details:    group n_cells mean_depth filter_status 1    ACR   12598   3981.279      included 2 No_ACR    9498   7392.881      included"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"finding-differentially-expressed-snps-between-groups","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Finding Differentially Expressed SNPs Between Groups","title":"Group-level DE SNP Analsyis","text":"aggregating data, can identify SNPs differentially present groups. findSNPsByGroup function compares alternative allele frequencies groups find variants specifically present one group .","code":""},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"findsnpsbygroup-function","dir":"Articles","previous_headings":"Group-level SNP Analysis > Finding Differentially Expressed SNPs Between Groups","what":"findSNPsByGroup Function","title":"Group-level DE SNP Analsyis","text":"","code":"# Function signature and parameters project$findSNPsByGroup(   ident.1,                 # Primary group identity to analyze   ident.2 = NULL,          # Secondary group identity to compare against (NULL = all others)   aggregated_data,         # Output from aggregateByGroup function   min_depth = 10,          # Minimum read depth required for a group   min_alt_frac = 0.2,      # Minimum alt allele fraction in primary group   max_alt_frac_other = 0.1, # Maximum alt fraction allowed in other group   return_all = TRUE        # Whether to return all results or only significant ones )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"example-finding-snps-between-acr-and-no_acr-groups","dir":"Articles","previous_headings":"Group-level SNP Analysis > Finding Differentially Expressed SNPs Between Groups","what":"Example: Finding SNPs Between ACR and No_ACR Groups","title":"Group-level DE SNP Analsyis","text":"","code":"# Find SNPs present in ACR patients but absent in No_ACR patients de_results <- project$findSNPsByGroup(   ident.1 = \"ACR\",             # Primary group to analyze   ident.2 = 'No_ACR',          # Comparison group   aggregated_data = collapsed, # Aggregated data from previous step   min_alt_frac = 0.05,         # SNP must have at least 5% alt frequency in ACR   max_alt_frac_other = 0.01    # SNP must have no more than 1% alt frequency in No_ACR )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"examining-the-results","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Examining the Results","title":"Group-level DE SNP Analsyis","text":"running analysis, can examine results:","code":"# View summary of the analysis print(de_results$summary)  # Look at the top SNPs by presence score head(de_results$results[order(-de_results$results$presence_score), ], 10)  # How many SNPs are present in each group? table(de_results$results$presence)  # Save results to a CSV file write.csv(de_results$results, 'SNP_ACR_NoACR_Donor.csv', row.names = FALSE)"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"visualizing-snps-in-genes-of-interest","dir":"Articles","previous_headings":"Group-level SNP Analysis","what":"Visualizing SNPs in Genes of Interest","title":"Group-level DE SNP Analsyis","text":"can visualize SNPs within specific genes using plotSNPs function.","code":""},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"plotsnps-function","dir":"Articles","previous_headings":"Group-level SNP Analysis > Visualizing SNPs in Genes of Interest","what":"plotSNPs Function","title":"Group-level DE SNP Analsyis","text":"","code":"# Function signature and parameters project$plotSNPs(   gene,                      # Gene symbol to visualize   group.by = NULL,           # Primary grouping variable from metadata   split.by = NULL,           # Secondary grouping variable for within-group comparisons   idents = NULL,             # Specific identity values to include   min_depth = 10,            # Minimum read depth required for a SNP   min_cells = 3,             # Minimum cells per group required   min_alt_frac = 0.2,        # Minimum alternative allele fraction   flank_size = 5000,         # Size of flanking regions (bp) around gene   plot_density = TRUE,       # Whether to include density plots   data_out = FALSE,          # Return data frame instead of plots   use_normalized = FALSE,    # Use normalized read depth values   color_scheme = c(\"low\" = \"blue\", \"high\" = \"red\"), # Colors for gradient   point_size_range = c(2, 8) # Range of point sizes for depth )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"example-visualizing-jak1-snps-by-acr-status-and-patient-donor","dir":"Articles","previous_headings":"Group-level SNP Analysis > Visualizing SNPs in Genes of Interest","what":"Example: Visualizing JAK1 SNPs by ACR Status and Patient-Donor","title":"Group-level DE SNP Analsyis","text":"","code":"# Plot SNPs in JAK1 gene without minimum alt fraction threshold project$plotSNPs(   'JAK1',   group.by = 'snpGrade',       # Group by ACR status   split.by = 'patient_donor',  # Split by patient and donor type   min_alt_frac = 0,            # Show all SNPs regardless of alt fraction   plot_density = FALSE         # Don't show density plots )"},{"path":"https://potterae.github.io/variantCell/articles/group_level_DE.html","id":"example-visualizing-with-filtered-snps-and-density-plots","dir":"Articles","previous_headings":"Group-level SNP Analysis > Visualizing SNPs in Genes of Interest","what":"Example: Visualizing With Filtered SNPs and Density Plots","title":"Group-level DE SNP Analsyis","text":"","code":"# Plot JAK1 SNPs with minimum alt fraction and density plots project$plotSNPs(   'JAK1',   group.by = 'snpGrade',   split.by = 'patient_donor',   min_alt_frac = 0.2,         # Only show SNPs with alt fraction ≥ 0.2   plot_density = TRUE         # Include density plots ) # Get SNP data for JAK1 as a data frame jak1_data <- project$plotSNPs(   'JAK1',   group.by = 'snpGrade',   split.by = 'patient_donor',   min_alt_frac = 0,   data_out = TRUE             # Return data frame instead of plot )  # Save to CSV for external analysis write.csv(jak1_data, \"JAK1_SNPs.csv\", row.names = FALSE)"},{"path":"https://potterae.github.io/variantCell/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Potter. Author, maintainer.","code":""},{"path":"https://potterae.github.io/variantCell/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Potter (2025). variantCell: Single-Cell SNP Analysis Focus Organ Transplant. R package version 0.1.0.","code":"@Manual{,   title = {variantCell: Single-Cell SNP Analysis with Focus on Organ Transplant},   author = {Andrew Potter},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"CONTRIBUTING to variantCell","title":"CONTRIBUTING to variantCell","text":"Thank interest contributing variantCell! document outlines can contribute R package single-cell SNP analysis.","code":""},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"CONTRIBUTING to variantCell","text":"Code Conduct Getting Started Development Workflow Pull Request Process Style Guidelines Testing Issue Reporting Feature Requests Contact","code":""},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING to variantCell","text":"participating project, agree uphold Code Conduct (follow Contributor Covenant). Please ensure interactions respectful, inclusive, professional.","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"Getting Started","what":"Prerequisites","title":"CONTRIBUTING to variantCell","text":"R (latest stable version recommended) Core dependencies: R6, data.table, Matrix, ggplot2, cowplot, GenomicRanges, IRanges, AnnotationHub, matrixStats, ensembldb, circlize, ComplexHeatmap, parallel, doParallel, foreach Optional: Seurat (Seurat objects), SingleCellExperiment (SCE objects)","code":""},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"fork-and-clone","dir":"","previous_headings":"Getting Started","what":"Fork and Clone","title":"CONTRIBUTING to variantCell","text":"Fork repository GitHub Clone fork locally: Add original repository upstream remote: Install package development mode:","code":"git clone https://github.com/YOUR-USERNAME/variantCell.git cd variantCell bash git remote add upstream https://github.com/potterae/variantCell.git bash rdevtools::install_local(\"path/to/variantCell\", force = TRUE)"},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"development-workflow","dir":"","previous_headings":"Getting Started","what":"Development Workflow","title":"CONTRIBUTING to variantCell","text":"Create new branch feature bugfix: Make changes, following style guidelines Test changes example data (see Testing) Test changes Commit changes descriptive commit messages Push fork: Submit pull request (see Pull Request Process)","code":"bash git checkout -b feature/your-feature-name bash git checkout -b fix/issue-you-are-fixing bash git commit -m \"Add functionality to analyze donor-specific SNPs\" bash git push origin feature/your-feature-name"},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Getting Started","what":"Pull Request Process","title":"CONTRIBUTING to variantCell","text":"Update README.md documentation details changes appropriate Update version number relevant files following semantic versioning Submit pull request main repository Respond feedback questions review process approval, maintainer merge PR","code":""},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"style-guidelines","dir":"","previous_headings":"Getting Started","what":"Style Guidelines","title":"CONTRIBUTING to variantCell","text":"follow tidyverse style guide R code following specifics: Use camelCase function names within R6 classes, following existing pattern Add comprehensive Roxygen documentation public functions Include examples documentation R6 class methods, follow documentation format shown existing code Indent 2 spaces Maximum line length 100 characters Include relevant error handling input validation","code":""},{"path":"https://potterae.github.io/variantCell/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Getting Started","what":"Testing","title":"CONTRIBUTING to variantCell","text":"Create test cases new functionality Verify code works example data adding new features, provide small example dataset possible Test transplant non-transplant modes applicable performance-critical functions, include benchmarking Issue Reporting {#issue-reporting} reporting issues, please include: clear description issue Steps reproduce problem Expected behavior Actual behavior R version, package version, OS information possible, minimal reproducible example Use issue templates provided repository. ###Feature Requests {#feature-requests} Feature requests welcome! Please provide: clear description proposed feature motivation use case feature possible, sketch example might work Whether ’re interested implementing Contact {#contact} questions contributing, please: Open issue GitHub Contact package maintainer: Andrew Potter Thank interest improving variantCell!","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"variantcell-010---alpha-in-development","dir":"","previous_headings":"","what":"Single-Cell SNP Analysis with Focus on Organ Transplant","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"tool analyzing single-cell SNP data focus organ transplant.","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"variantCell R-based computational tool designed analyze single-cell SNP data particular focus transplant settings. works widely-used single-cell genomics workflows identify, characterize, visualize SNPs cellular resolution, enabling researchers distinguish donor recipient cells quantify SNPs may influence transplant outcomes. package provides comprehensive framework processing CellSNP Vireo output, normalizing SNP counts, performing differential SNP analysis across cell types clinical conditions. built-visualization capabilities, users can explore variant distributions within genes interest create SNP heatmaps across cell clusters. Unlike existing approaches analyze variants bulk tissue level, variantCell leverages single-cell resolution reveal cell type-specific genetic signals heterogeneity within transplanted tissues. approach offers unique insights genetic factors driving transplant rejection, immune response variation, cellular chimerism complex tissues, applications extending cancer, development, areas genetic mosaicism biologically significant.","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"core-dependencies","dir":"","previous_headings":"","what":"Core Dependencies","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"R6, data.table, Matrix, ggplot2, cowplot, GenomicRanges, IRanges, AnnotationHub, matrixStats, ensembldb, circlize, ComplexHeatmap","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"optional-dependencies","dir":"","previous_headings":"","what":"Optional Dependencies","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"Seurat: using Seurat objects input (required using data frames), SingleCellExperiment: using SingleCellExperiment objects input Parallel processing findDESNPs function: parallel, doParallel, foreach","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"add samples SNP database, package requires: - output directory CellSNP along cell metadata (Seurat object, dataframe, SingleCellExperiment) - Cell prefixes can optionally specified adding sample data match cell IDs integrated data transplant mode, ’ll also need: - Vireo output directory - Specification donors ‘Recipient’ ‘Donor’ (can determined using process_vireo helper function) adding samples, SNP database can built using buildSNPDatabase function, enabling: Finding SNPs present absent specific groups Performing cell (group)-level differential SNP expression analysis (uses parallel processing) SNPs can visualized: Plotting SNPs specific genes Creating heatmaps SNPs within cell clusters / groups","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"Install GitHub Check devtools installed, install needed (!requireNamespace(\"devtools\", quietly = TRUE)) { install.packages(\"devtools\") } devtools::install_github(\"potterae/variantCell\")","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"project licensed MIT License.","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"Funding: Heart Institute, Cincinnati Children’s Hospital Medical Center","code":""},{"path":"https://potterae.github.io/variantCell/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Single-Cell SNP Analysis with Focus on Organ Transplant","text":"use software, please cite: Andrew Potter, Don Hayes (preparation). variantCell: tool single-cell SNP analysis. GitHub: https://github.com/potterae/variantCell","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sample with SNP data to the variantCell project — addSampleData","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"Processes adds single-cell sample variantCell project integrating metadata, donor assignments Vireo, SNP data CellSNP. main function adding samples variantCell project supports different input data types transplant non-transplant experimental designs.","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"sample_id Character. Unique identifier sample. vireo_path Character NULL. Path Vireo donor_ids.tsv file. Required transplant mode, can NULL non-transplant mode. cellsnp_path Character. Path directory containing CellSNP output files. cell_data Object. Cell data one three forms: Seurat object, SingleCellExperiment object, data frame cell metadata (cell identifiers row names). data_type Character. Type cell_data object: \"seurat\", \"sce\", \"dataframe\". prefix_text Character. Text prepend cell identifiers Vireo data match cell barcodes input data. donor_type Named character vector NULL. Mapping Vireo donor_id values biological roles, e.g. c(donor0 = \"Donor\", donor1 = \"Recipient\"). Required transplant mode. non_transplant_mode Logical. Whether sample non-transplant experiment (TRUE) transplant experiment (FALSE). min_cells Integer. Minimum number cells alternative allele required SNP included filtered dataset. min_alt_frac Numeric. Minimum alternative allele fraction required counting cells min_cells filter. normalize Logical. Whether calculate normalized SNP counts (TRUE) (FALSE). scale.factor Numeric. Scaling factor normalization. used normalize=TRUE. sample_metadata Data frame NULL. Additional sample-level metadata.","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"Invisibly returns self (variantCell object) sample added samples list.","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"function performs several steps: Processes cell data donor assignments based data_type mode Reads processes CellSNP data (SNP info count matrices) Matches cell barcodes data sources Optionally normalizes count data Filters SNPs based minimum criteria Integrates metadata stores sample project function supports two modes: Transplant mode: Uses Vireo assign cells donors transplantation scenarios Non-transplant mode: Treats cells coming single donor","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"transplant mode, vireo_path donor_type parameters required non-transplant mode, vireo_path can NULL donor_type defaults c(donor0 = \"donor0\") normalize parameter controls whether normalized expression values calculated, useful expression-based analyses function expects specific file structure CellSNP output: base VCF file, AD/DP count matrices Matrix Market format","code":""},{"path":"https://potterae.github.io/variantCell/reference/addSampleData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a sample with SNP data to the variantCell project — addSampleData","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a variantCell project project <- variantCell$new()  # Example 1: Add a sample in transplant mode using a Seurat object project$addSampleData(   sample_id = \"transplant_sample1\",   vireo_path = \"path/to/vireo/donor_ids.tsv\",   cellsnp_path = \"path/to/cellsnp/output/\",   cell_data = seurat_object,   data_type = \"seurat\",   prefix_text = \"Patient1_Sample1_\",   donor_type = c(donor0 = \"Donor\", donor1 = \"Recipient\"),   normalize = TRUE )  # Example 2: Add a sample in non-transplant mode using a metadata data frame project$addSampleData(   sample_id = \"non_transplant_sample1\",   vireo_path = NULL,   cellsnp_path = \"path/to/cellsnp/output/\",   cell_data = metadata_df,   data_type = \"dataframe\",   prefix_text = \"Normal_Sample1_\",   non_transplant_mode = TRUE,   normalize = TRUE ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"Aggregates single-cell SNP data group-level summaries based specified metadata column. function collapses individual cell SNP counts group-level matrices, can used group-level differential SNP analyses. function supports transplant non-transplant modes, donor type filtering, normalized expression values.","code":""},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"group_by Character. Column name metadata use grouping cells. Must present cell_metadata. donor_type Character, optional. Specific donor type analyze (e.g., \"Donor\" \"Recipient\"). NULL, uses cells. Ignored non-transplant mode. min_cells_per_group Integer. Minimum number cells required group included analysis. Groups fewer cells marked \"filtered_low_cells\" metadata. use_normalized Logical. Whether include normalized depth counts output (TRUE) use raw counts (FALSE).","code":""},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"list containing: ad_matrix Aggregated alternative allele counts matrix (SNPs x Groups) dp_matrix Aggregated depth matrix (SNPs x Groups) dp_matrix_normalized Aggregated normalized depth matrix (SNPs x Groups), available requested metadata Data frame group-level metadata QC metrics group_by metadata column used grouping parameters List parameters used aggregation snp_info Data frame SNP information snp_annotations Data frame SNP annotations","code":""},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"function works : Filtering cells based donor_type specified (e.g., use Donor cells) Identifying unique values grouping column (e.g., cell_type) Summing alternative allele counts depth counts across cells group Creating group-level metadata cell counts quality metrics Filtering groups fewer cells specified threshold function automatically detects non-transplant mode (single donor type) adjusts behavior accordingly. also checks normalized counts includes output available requested.","code":""},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"function typically used preprocessing step findSNPsByGroup() aggregated matrices longer contain cell-level information; counts summed across cells group transplant data, often useful analyze donor recipient cells separately specifying donor_type parameter Groups fewer cells min_cells_per_group marked \"filtered_low_cells\" metadata still included output matrices","code":""},{"path":"https://potterae.github.io/variantCell/reference/aggregateByGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aggregateByGroup: Aggregate SNP data by cell groups — aggregateByGroup","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage - aggregate by cell type collapsed <- project$aggregateByGroup(   group_by = \"cell_type\",   use_normalized = TRUE )  # Analyze only donor cells with stricter filtering donor_agg <- project$aggregateByGroup(   group_by = \"cell_type\",   donor_type = \"Donor\",   min_cells_per_group = 5 )  # Aggregate by disease status disease_agg <- project$aggregateByGroup(   group_by = \"disease_status\",   use_normalized = TRUE ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/buildSNPDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a unified SNP database from all samples — buildSNPDatabase","title":"Build a unified SNP database from all samples — buildSNPDatabase","text":"Integrates SNP data, annotations, cell metadata samples variantCell project unified database. function creates merged sparse matrices alternative allele (AD) depth (DP) counts across cells, combines cell metadata, annotates SNPs genomic features, calculates database-wide metrics.","code":""},{"path":"https://potterae.github.io/variantCell/reference/buildSNPDatabase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a unified SNP database from all samples — buildSNPDatabase","text":"Invisibly returns self (variantCell object) unified SNP database constructed stored snp_database field.","code":""},{"path":"https://potterae.github.io/variantCell/reference/buildSNPDatabase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a unified SNP database from all samples — buildSNPDatabase","text":"function performs several key steps: Collects SNP information across samples identifies unique SNPs Retrieves genomic annotations SNPs (exonic, intronic, promoter, etc.) Combines metadata samples, handling missing columns appropriately Creates unified sparse matrices AD DP counts across cells available, also creates matrix normalized counts Calculates database-wide metrics SNP Generates QC report summary statistics function handles complexities integrating data multiple samples potentially different sets SNPs metadata columns. manages matrix indexing, column alignment, technical aspects needed build cohesive database. running function, subsequent analyses (differential expression, plotting, etc.) use unified database rather individual sample data.","code":""},{"path":"https://potterae.github.io/variantCell/reference/buildSNPDatabase.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a unified SNP database from all samples — buildSNPDatabase","text":"function must called adding desired samples addSampleData() function requires least one sample added SNP annotation may take significant time large datasets resulting database can use substantial memory projects many cells SNPs","code":""},{"path":"https://potterae.github.io/variantCell/reference/buildSNPDatabase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a unified SNP database from all samples — buildSNPDatabase","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a variantCell project project <- variantCell$new()  # Add samples project$addSampleData(...) project$addSampleData(...)  # Build the unified SNP database project$buildSNPDatabase()  # Now the project is ready for analysis project$setProjectIdentity(\"cell_type\") results <- project$findDESNPs(...) } # }"},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":null,"dir":"Reference","previous_headings":"","what":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"Reduces number cells variantCell object downsampling group maximum number cells. function useful balancing cell numbers across groups, reducing computational burden, mitigating effects groups different cell counts downstream analyses.","code":""},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"max_cells Integer. Maximum number cells keep group. Groups fewer cells threshold retain cells. Default: 1000. group_by Character, optional. Metadata column use grouping cells. NULL, uses current project identity set setProjectIdentity(). Default: NULL. seed Integer. Random seed reproducible downsampling. Default: 42.","code":""},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"Returns modified object invisibly (method chaining).","code":""},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"function performs downsampling : Grouping cells based specified metadata column group, cell count exceeds max_cells, randomly selecting max_cells cells keep Updating matrices metadata include selected cells Maintaining consistency across data structures object operation modifies object -place, permanently removing cells selected. particularly useful working imbalanced datasets, cell types conditions many cells others, bias analytical results. function automatically handles updates relevant data structures, including: Alternative allele (AD) matrix Depth (DP) matrix Normalized depth matrix (available) Cell metadata Sample-level information","code":""},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"function modifies object -place (copy created) Downsampling performed randomly group seed parameter ensures reproducibility random sampling Groups fewer cells max_cells keep cells downsampling sample remaining cells, removed object detailed summary downsampling printed console","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/downsampleVariant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"downsampleVariant: Downsample Cells by Group to Balance Cell Numbers — downsampleVariant","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage - downsample to 500 cells per cell type project$setProjectIdentity(\"cell_type\") project$downsampleVariant(max_cells = 500)  # Downsample by a different grouping variable project$downsampleVariant(   max_cells = 200,   group_by = \"condition\",   seed = 123  # Use different seed for different random selection )  # Use with method chaining results <- project$downsampleVariant(max_cells = 300)$findDESNPs(   ident.1 = \"T_cells\",   ident.2 = \"B_cells\" ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":null,"dir":"Reference","previous_headings":"","what":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"Identifies differentially expressed SNPs cell populations comparing read depths alternative allele frequencies. function performs comprehensive statistical analysis single-cell level, support parallel processing improve performance large datasets.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"ident.1 Character. Primary cell identity analyze. ident.2 Character, optional. Secondary cell identity compare . NULL, compares cells. donor_type Character, optional. Donor type restrict analysis (\"Donor\" \"Recipient\"). NULL, uses cells regardless donor type. use_normalized Logical. Whether use normalized depth counts (TRUE) raw counts (FALSE). min_expr_cells Integer. Minimum number expressing cells required group. min_alt_frac Numeric 0 1. Minimum alternative allele fraction consider cell expressing. logfc.threshold Numeric. Minimum absolute log2 fold-change required report SNP. calc_p Logical. Whether calculate p-values (Wilcoxon test). Set FALSE save computation time. p.adjust.method Character. Method p-value adjustment, passed p.adjust(). Default: \"BH\" (Benjamini-Hochberg). return_all Logical. Whether return SNPs significant ones. pseudocount Numeric. Value added expression values log transformation. min.p Numeric. Minimum p-value report (prevents numerical underflow). debug Logical. Whether print debugging information analysis. n_cores Integer, optional. Number CPU cores use parallel processing. NULL, automatically uses detectCores() - 1. use_parallel Logical. Whether implement parallel processing. chunk_size Integer.   Number SNPs process batch parallel execution. Larger values may improve performance require memory. max_ram_gb Numeric.  Maximum RAM usage estimate gigabytes parallel processing. function automatically reduce chunk_size estimated memory usage exceed limit.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"List containing: results Data frame differentially expressed SNPs metrics including log2FC, expression values, cell counts, significance statistics. summary List analysis overview, including counts significant SNPs, /downregulated SNPs, parameter settings used.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"function calculates differential expression comparing average expression SNPs two groups, normalized total number cells group. SNP, cells considered expressing minimum alternative allele fraction (min_alt_frac) positive read depth. Statistical testing performed using Wilcoxon rank-sum test calc_p=TRUE. Multiple testing correction applied using specified p.adjust.method. parallel implementation distributes SNP processing across multiple CPU cores significantly improved performance large datasets.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"Requires package 'parallel', 'foreach', 'doParallel' parallel processing Project identity must set using function via setProjectIdentity() non-transplant datasets, donor_type filtering automatically disabled","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/findDESNPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"findDESNPs: Cell-Level Differential SNP Expression Analysis — findDESNPs","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize a variantCell project  proj$setProjectIdentity('cell_type')  # Basic usage comparing T cells vs other cells, donor cells only results <- proj$findDESNPs(   ident.1 = \"T_cells\",   ident.2 = NULL,   donor_type = \"Donor\",   min_expr_cells = 5,   logfc.threshold = 0.25 )  # Without p-value calculation for faster processing fast_results <- proj$findDESNPs(   ident.1 = \"CD4\",   ident.2 = \"CD8\",   calc_p = FALSE,   n_cores = 8 )  # Access results head(results$results) results$summary } # }"},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"Identifies SNPs exclusively predominantly present one cell group compared another. function analyzes alternative allele frequencies groups using aggregated data detect group-specific genetic variants.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"ident.1 Character. Primary group identity analyze. ident.2 Character, optional. Secondary group identity compare . NULL, compares groups combined. aggregated_data List. Output aggregateByGroup function required matrices metadata. min_depth Integer. Minimum total read depth required group consider SNP. min_alt_frac Numeric 0 1. Minimum alternative allele fraction required group SNP considered present. max_alt_frac_other Numeric 0 1. Maximum alternative allele fraction allowed group SNP considered absent . return_all Logical. Whether return results regardless significance.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"List containing: results Data frame group-specific SNPs metrics including genomic position, gene annotation, depth metrics, allele frequencies, presence classification. summary List analysis overview including counts SNPs present group parameters used filtering.","code":""},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"function identifies SNPs present one group absent another applying thresholds alternative allele frequencies. SNP, presence score calculated quantifies strength evidence group-specific presence, considering frequency difference read depth. SNP considered \"present\" group alternative allele frequency exceeds min_alt_frac read depth exceeds min_depth. considered \"absent\" group alternative allele frequency max_alt_frac_other read depth exceeds min_depth. presence score formula : score = (alt_frac_present - alt_frac_absent) * (depth/min_depth) * (1 - alt_frac_absent/min_alt_frac)","code":""},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"function operates pre-aggregated data aggregateByGroup() rather raw SNP data Non-transplant mode automatically detected aggregated data parameters Results sorted presence score, highest-scoring SNPs listed first","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/findSNPsByGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"findSNPsByGroup: Group-Level SNP Presence Analysis — findSNPsByGroup","text":"","code":"if (FALSE) { # \\dontrun{ # Aggregate SNP data by cell type agg_data <- proj$aggregateByGroup(   group_by = \"cell_type\",   donor_type = \"Donor\",   use_normalized = TRUE )  # Find T cell-specific SNPs tc_snps <- proj$findSNPsByGroup(   ident.1 = \"T_cells\",   ident.2 = \"B_cells\",   aggregated_data = agg_data,   min_depth = 20,   min_alt_frac = 0.25,   max_alt_frac_other = 0.05 )  # Comparing patient groups patient_snps <- proj$findSNPsByGroup(   ident.1 = \"ACR\",   ident.2 = \"No_ACR\",   aggregated_data = patient_data,   min_alt_frac = 0.1,   max_alt_frac_other = 0.02 ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/getCurrentIdentity.html","id":null,"dir":"Reference","previous_headings":"","what":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","title":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","text":"Retrieves displays information currently active cell identity variable. function returns details metadata column used cell grouping provides summary cell distribution across different identity categories.","code":""},{"path":"https://potterae.github.io/variantCell/reference/getCurrentIdentity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","text":"Invisibly returns list containing: identity Character. Name current identity column. distribution Table. Distribution cells across identity categories. total_cells Integer. Total number cells dataset. identity set, returns NULL.","code":""},{"path":"https://potterae.github.io/variantCell/reference/getCurrentIdentity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","text":"function checks whether project-wide identity set using setProjectIdentity(). identity active, prints name identity column displays summary many cells belong identity category. function useful : Verifying grouping variable currently active Checking cell distribution across groups analysis Confirming identity assignments expected Debugging analysis results seem unexpected","code":""},{"path":"https://potterae.github.io/variantCell/reference/getCurrentIdentity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","text":"identity set, function returns NULL displays notification function prints information console returns data invisibly returned list can captured used programmatically needed","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/getCurrentIdentity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getCurrentIdentity: Get Current Project-Wide Cell Identity Information — getCurrentIdentity","text":"","code":"if (FALSE) { # \\dontrun{  # Check current identity project$getCurrentIdentity()  # Capture the return value for programmatic use id_info <- project$getCurrentIdentity() if(!is.null(id_info)) {   # Find the most abundant cell type   most_common <- names(which.max(id_info$distribution))   cat(\"Most common cell type:\", most_common) }  # Use in a workflow project$setProjectIdentity(\"cell_type\") project$getCurrentIdentity()  # Verify it worked project$findDESNPs(ident.1 = \"T_cells\") } # }"},{"path":"https://potterae.github.io/variantCell/reference/plotSNPHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","title":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","text":"function generates heatmap visualization SNP expression data across different cell groups, optional splitting additional variable. aggregates SNP read counts within group can filter based alternative allele frequency thresholds. resulting heatmap shows expression patterns gene-based row annotation clustering options.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","text":"genes Character vector gene names include heatmap. Can NULL snp_indices provided instead. snp_indices Integer vector specific SNP indices include heatmap. Can NULL genes provided instead. group.Character. Column name metadata use primary grouping cells. split.Character, optional. Column name metadata use secondary grouping/splitting. min_alt_frac Numeric 0 1. Minimum alternative allele fraction required SNP counted expressed cell. Default 0.2. scale_data Logical. Whether scale data row visualization. Default TRUE. max_scale Numeric. Maximum value scaled data (values capped ±max_scale). Default 2. cluster_rows Logical. Whether cluster rows (SNPs) heatmap. Default TRUE. cluster_cols Logical. Whether cluster columns (cell groups) heatmap. Default TRUE. show_rownames Logical. Whether display row names (SNP identifiers) heatmap. Default TRUE. show_colnames Logical. Whether display column names (group identifiers) heatmap. Default TRUE. fontsize_row Numeric. Font size row names. Default 8. fontsize_col Numeric. Font size column names. Default 8. exclude_empty Logical. Whether exclude rows columns expression data. Default TRUE. normalize_by_cells Logical. Whether normalize expression values total cell count group (TRUE) expressing cells (FALSE). Default TRUE. data_out Logical. Whether return underlying data matrices instead heatmap object. Default FALSE.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","text":"data_out FALSE (default), returns ComplexHeatmap object can directly plotted customized. data_out TRUE, returns list containing: raw_matrix: Matrix raw expression values scaled_matrix: Matrix scaled expression values cell_counts: Matrix total cell counts per group expr_cell_counts: Matrix expressing cell counts per group snp_info: Data frame SNP identifiers, gene names, feature types","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","text":"function calculates mean expression SNPs across cell groups, filtering based minimum alternative allele frequency. SNP group, computes: number cells SNP number cells expressing SNP alt_frac threshold mean expression value (normalized total cells expressing cells) resulting heatmap includes annotation gene names feature types, rows grouped gene. heatmap uses blue--red color scale scaled expression values.","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/plotSNPHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotSNPHeatmap: Create a heatmap visualization of SNP expression across cell groups — plotSNPHeatmap","text":"","code":"if (FALSE) { # \\dontrun{  project$plotSNPHeatmap(genes = \"BRCA1\", group.by = \"cell_type\")  # Plot multiple genes with custom settings project$plotSNPHeatmap(   genes = c(\"TP53\", \"KRAS\", \"EGFR\"),   group.by = \"cell_type\",   split.by = \"patient\",   min_alt_frac = 0.1,   cluster_rows = FALSE )  # Return the underlying data for custom processing snp_data <- project$plotSNPHeatmap(   genes = \"APOE\",   group.by = \"condition\",   data_out = TRUE ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":null,"dir":"Reference","previous_headings":"","what":"plotSNPs ","title":"plotSNPs ","text":"Creates genomic visualizations SNP distribution specified gene, showing alternative allele frequencies across different cell populations. function generates interactive plots displaying SNPs along gene's coordinates various grouping options.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotSNPs ","text":"gene Character. Name gene visualize. group.Character, optional. Primary grouping variable metadata. NULL, cells treated one group. split.Character, optional. Secondary grouping variable within-group comparisons. Useful donor/recipient condition comparisons within cell types. idents Vector, optional. Specific identity values include. Must values group.column. min_depth Integer. Minimum read depth required include SNP visualization. min_cells Integer. Minimum cells per group required include group visualization. min_alt_frac Numeric 0 1. Minimum alternative allele fraction required include SNP. Set 0 show SNPs regardless alt fraction. flank_size Integer. Size flanking regions (bp) include around gene. plot_density Logical. Whether include density distribution plots main visualization. data_out Logical. TRUE, returns data frame SNP data instead plots. use_normalized Logical. Whether use normalized read depth values. color_scheme Vector. Named vector \"low\" \"high\" colors alt fraction gradient. point_size_range Numeric vector length 2. Range point sizes (minimum maximum) depth representation.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotSNPs ","text":"data_out = FALSE (default): Plot grid main SNP visualization optional density plots. data_out = TRUE: Data frame containing SNP information gene including positions, alternative allele frequencies, depths, metrics group.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plotSNPs ","text":"function creates comprehensive visualization SNPs within gene region, showing: main plot : Gene structure exons displayed black rectangles SNP positions represented points along genomic coordinates Alternative allele frequencies encoded color Read depth encoded point size Groups splits organized vertically Optional density plots showing: Alternative allele fraction distribution Read depth distribution (log10 scale) function applies filters ensure high-quality data displayed. SNPs low depth low alternative allele frequency can excluded. Groups insufficient cells also displayed.","code":""},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"plotSNPs ","text":"Requires gene annotation data AnnotationHub (automatically accessed) May take longer generate genes many SNPs using many groups Setting min_alt_frac = 0 shows SNPs may make plots busy data_out parameter useful custom analysis visualization","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/plotSNPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotSNPs ","text":"","code":"# Basic visualization of a gene   if (FALSE) { # \\dontrun{  # Split by cell type and donor type project$plotSNPs(   gene = \"IL7R\",   group.by = \"cell_type\",   split.by = \"donor_type\",   min_alt_frac = 0.1 )  # Focus on specific cell types project$plotSNPs(   gene = \"PDCD1\",   group.by = \"cell_type\",   idents = c(\"CD4_T\", \"CD8_T\", \"Treg\"),   flank_size = 10000 )  # Return data frame instead of plot for custom visualization snp_data <- project$plotSNPs(   gene = \"HLA-DRB1\",   group.by = \"condition\",   data_out = TRUE ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":null,"dir":"Reference","previous_headings":"","what":"process_tsv: Process a TSV file with prefix addition — process_tsv","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"Reads TSV file, adds prefix specified column, sets column row names resulting data frame. function typically used preprocess sample metadata files ensure cell identifiers match across different data sources.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"file_path Character. Path TSV file read. prefix_column Character. Name column prefix added used row names. prefix_text Character. Text prepend value specified column.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"data frame : specified column prefixed given text modified column set row names column removed data frame","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"function particularly useful processing Vireo donor assignment files need integrated single-cell data (like Seurat objects), cell identifiers need match exactly proper merging.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"function assumes file exists formatted proper TSV file. validation performed check column specified prefix_column exists TSV file.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_tsv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"process_tsv: Process a TSV file with prefix addition — process_tsv","text":"","code":"if (FALSE) { # \\dontrun{ # Process a donor assignment file for Vireo donor_meta <- process_tsv(   file_path = \"path/to/donor_ids.tsv\",   prefix_column = \"cell\",   prefix_text = \"Patient1_Sample3_\" )  # Now donor_meta has the prefixed cell IDs as row names # and can be easily matched with Seurat object cell barcodes } # }"},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"Processes donor genetic identity data Vireo integrates existing metadata data frame. function matches cell identifiers Vireo output metadata, generates basic cell count statistics per donor.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"metadata_df data frame. metadata data frame match donor information, cell identifiers row names. vireo_path Character. Path Vireo donor_ids.tsv file containing donor assignments. prefix_text Character. Text prepend cell identifiers Vireo data match cell identifiers metadata data frame.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"list containing: metadata original metadata data frame, unchanged donor_data Data frame containing donor assignments matched cells matching_cells Character vector cell identifiers matched metadata Vireo summaries List summary statistics including: donor_summaries: Per-donor cell counts cells_matched: Total number cells successfully matched total_cells: Total number cells metadata data frame total_vireo_cells: Total number cells Vireo data","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"function provides simpler alternative Seurat SingleCellExperiment integrations data frame metadata. first processes Vireo TSV file using process_tsv function, adding prefix cell identifiers, finds matching cells Vireo data metadata data frame, generates basic summary statistics.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"Unlike Seurat SingleCellExperiment integration functions, function modify input metadata data frame. returns matching information.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"process_vireo_dataframe: Integrate Vireo donor assignments with a metadata data frame — process_vireo_dataframe","text":"","code":"if (FALSE) { # \\dontrun{ # Process a metadata data frame with Vireo donor assignments results <- process_vireo_dataframe(   metadata_df = cell_metadata,   vireo_path = \"path/to/vireo/donor_ids.tsv\",   prefix_text = \"Patient1_Sample3_\" )  # Check matching statistics results$summaries$cells_matched results$summaries$total_cells  # Access donor assignments for matched cells donor_assignments <- results$donor_data } # }"},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"Processes donor genetic identity data Vireo integrates SingleCellExperiment object's metadata. function adds donor assignments colData, matches cell identifiers Vireo output SCE object, generates summary statistics cell type distributions per donor.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"sce_obj SingleCellExperiment object. single-cell dataset annotated donor information. vireo_path Character. Path Vireo donor_ids.tsv file containing donor assignments. prefix_text Character. Text prepend cell identifiers Vireo data match cell barcodes SingleCellExperiment object.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"list containing: sce_object SingleCellExperiment object donor assignment metadata added donor_data Data frame containing donor assignments matched cells matching_cells Character vector cell identifiers matched SCE Vireo summaries List summary statistics including: donor_summaries: Per-donor cell counts cell type distributions (available) cells_matched: Total number cells successfully matched total_sce_cells: Total number cells SingleCellExperiment object total_vireo_cells: Total number cells Vireo data","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"function first processes Vireo TSV file using process_tsv function, adding prefix cell identifiers. adds donor assignments SingleCellExperiment object's colData generates summary statistics cell type distributions donor (cell_type information available colData).","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"function checks \"cell_type\" column SingleCellExperiment object's colData. present, generate cell type distribution summaries per donor. , cell_types field donor_summaries NULL.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_sce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"process_vireo_sce: Integrate Vireo donor assignments with a SingleCellExperiment object — process_vireo_sce","text":"","code":"if (FALSE) { # \\dontrun{ # Process a SingleCellExperiment object with Vireo donor assignments results <- process_vireo_sce(   sce_obj = my_sce_object,   vireo_path = \"path/to/vireo/donor_ids.tsv\",   prefix_text = \"Patient1_Sample3_\" )  # Access the updated SingleCellExperiment object updated_sce <- results$sce_object  # Check matching statistics results$summaries$cells_matched results$summaries$total_sce_cells } # }"},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"Processes donor genetic identity data Vireo integrates Seurat object's metadata. function adds donor assignments cell's metadata, matches cell identifiers Vireo output Seurat object, generates summary statistics cell type distributions per donor.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"seurat_obj Seurat object. single-cell dataset annotated donor information. vireo_path Character. Path Vireo donor_ids.tsv file containing donor assignments. prefix_text Character. Text prepend cell identifiers Vireo data match cell barcodes Seurat object.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"list containing: seurat_object Seurat object donor assignment metadata added donor_data Data frame containing donor assignments matched cells matching_cells Character vector cell identifiers matched Seurat Vireo summaries List summary statistics including: donor_summaries: Per-donor cell counts cell type distributions cells_matched: Total number cells successfully matched total_seurat_cells: Total number cells Seurat object total_vireo_cells: Total number cells Vireo data","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"function first processes Vireo TSV file using process_tsv function, adding prefix cell identifiers. adds donor assignments Seurat object's metadata generates summary statistics cell type distributions donor. function prints verbose diagnostic information execution help track matching process.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"function assumes Seurat object \"cell_type\" column metadata, used generate cell type distribution summaries per donor.","code":""},{"path":"https://potterae.github.io/variantCell/reference/process_vireo_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"process_vireo_seurat: Integrate Vireo donor assignments with a Seurat object — process_vireo_seurat","text":"","code":"if (FALSE) { # \\dontrun{ # Process a Seurat object with Vireo donor assignments results <- process_vireo_seurat(   seurat_obj = my_seurat_object,   vireo_path = \"path/to/vireo/donor_ids.tsv\",   prefix_text = \"Patient1_Sample3_\" )  # Access the updated Seurat object updated_seurat <- results$seurat_object  # View donor summaries results$summaries$donor_summaries  # Check matching statistics results$summaries$cells_matched results$summaries$total_seurat_cells } # }"},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":null,"dir":"Reference","previous_headings":"","what":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"Sets metadata column use primary cell identity variable downstream analyses. function establishes cell grouping used functions like findDESNPs() SNP analysis methods.","code":""},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"ident_col Character. Name column cell_metadata use cell identity. Must existing column metadata.","code":""},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"Returns object invisibly (method chaining).","code":""},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"function validates specified column exists cell metadata, sets active identity subsequent analyses. also prints summary unique identities found number cells category. identity column crucial many analysis functions defines cells grouped comparing SNP expression presence populations. Common identity variables include cell type annotations, cluster IDs, condition labels, categorical metadata meaningfully separates cell populations.","code":""},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"function must called using analysis methods rely cell identities function prints summary identities found, can useful verification previously set identity () overwritten function","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/setProjectIdentity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setProjectIdentity: Set Project-Wide Cell Identity Variable — setProjectIdentity","text":"","code":"if (FALSE) { # \\dontrun{  # Set cell type as the active identity  project$setProjectIdentity(\"cell_type\")  # Use cluster IDs instead project$setProjectIdentity(\"seurat_clusters\")  # Set disease status as identity for case-control comparisons project$setProjectIdentity(\"disease_status\")  # Method chaining example results <- project$setProjectIdentity(\"cell_type\")$findDESNPs(   ident.1 = \"T_cells\",   donor_type = \"Donor\" ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"Filters cells project based values specified metadata column. function can either create new variantCell object subset data (default) modify current object -place.","code":""},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"column Character. Name metadata column filter . values Vector. Values include exclude (depending invert parameter). invert Logical. FALSE (default), keeps cells matching values; TRUE, keeps cells matching values. copy Logical. TRUE (default), returns new variantCell object subset; FALSE, modifies current object -place.","code":""},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"copy=TRUE: Returns new variantCell object containing subset data. copy=FALSE: Returns modified object invisibly (method chaining).","code":""},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"function subsets project data components, including: Alternative allele (AD) matrix Depth (DP) matrix Normalized depth matrix (available) Cell metadata function also handles sample management, removing samples longer cells filtering. ensures data consistency throughout object. copy=TRUE (default), original object remains untouched new object selected data returned, allowing exploration subsets without risk data loss. copy=FALSE, subsetting operation permanently modifies original object, memory-efficient irreversible.","code":""},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"copy=TRUE, function performs deep clone may use significant memory large datasets bioinformatics workflows, recommended keep original data intact work copies enable different analysis branches function prints summary changes verification","code":""},{"path":[]},{"path":"https://potterae.github.io/variantCell/reference/subsetVariantCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subsetVariantCell: Subset Cells Based on Metadata Values — subsetVariantCell","text":"","code":"if (FALSE) { # \\dontrun{ # Create a new variantCell object with only T cells (default behavior) t_cell_project <- project$subsetvariantCell(\"cell_type\", c(\"CD4\", \"CD8\", \"Treg\"))  # Modify the original project in-place (more memory efficient but irreversible) project$subsetvariantCell(\"patient_id\", \"Patient1\", copy = FALSE)  # Create a subset excluding cells from a specific condition no_acr_project <- project$subsetvariantCell(\"condition\", \"ACR\", invert = TRUE)  # Method chaining example (when using copy=FALSE) results <- project$subsetvariantCell(\"donor_type\", \"Donor\", copy = FALSE)$findDESNPs(   ident.1 = \"T_cells\",   ident.2 = \"B_cells\" ) } # }"},{"path":"https://potterae.github.io/variantCell/reference/variantCell-package.html","id":null,"dir":"Reference","previous_headings":"","what":"variantCell: Single-Cell SNP Analysis for Transplant Studies variantCell: A tool for analyzing single-cell SNP data with focus on organ transplant — variantCell-package","title":"variantCell: Single-Cell SNP Analysis for Transplant Studies variantCell: A tool for analyzing single-cell SNP data with focus on organ transplant — variantCell-package","text":"tool analyzing single-cell SNP data focus organ transplant. variantCell processes CellSNP Vireo output identify, characterize, visualize SNPs cellular resolution, enabling researchers distinguish donor recipient cells quantify SNPs may influence transplant outcomes.","code":""},{"path":"https://potterae.github.io/variantCell/reference/variantCell-package.html","id":"core-features","dir":"Reference","previous_headings":"","what":"Core Features","title":"variantCell: Single-Cell SNP Analysis for Transplant Studies variantCell: A tool for analyzing single-cell SNP data with focus on organ transplant — variantCell-package","text":"Processing CellSNP Vireo output data SNP identification characterization across cell types Differential SNP analysis Visualization SNP distributions patterns Integration single-cell metadata","code":""},{"path":"https://potterae.github.io/variantCell/reference/variantCell-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"variantCell: Single-Cell SNP Analysis for Transplant Studies variantCell: A tool for analyzing single-cell SNP data with focus on organ transplant — variantCell-package","text":"Maintainer: Andrew Potter andrew.potter@cchmc.org (ORCID)","code":""}]
